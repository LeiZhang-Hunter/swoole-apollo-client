<?php

namespace Component\Apollo;

use Framework\Core\Swoole\SwooleProcess\SwooleProcessManager;

class SwooleApolloManager extends SwooleProcessManager
{
    //配置文件
    private $config;

    /**
     * SwooleApolloClient constructor.
     * @param $config
     */
    public function __construct($config)
    {
        parent::__construct($config);
        $this->config = $config;
    }

    private function listen()
    {

    }

    public function onReload()
    {
        exit("apollo client not support reload\n");
    }

    public function onStart()
    {
        $pid = parent::onStart(); // TODO: Change the autogenerated stub
    }

    public function start()
    {
        //检验app数目是否小于进程数，如果小于会出现空闲进程
        $worker_num = isset($this->config["worker_num"]) ? (int)$this->config["worker_num"] : 1;
        $this->config["worker_num"] = $worker_num;
        $app = isset($this->config["app"]) ? $this->config["app"] : 1;

        //检查进程和应用数的配比关系
        if (!$app || !is_array($app))
        {
            trigger_error("app settings error", E_USER_ERROR);
        }

        if (!$worker_num) {
            trigger_error("worker_num settings error", E_USER_ERROR);
        }

        if (sizeof($app) < $worker_num) {
            trigger_error("The number of applications must be greater than the number of worker processes",
                E_USER_ERROR);
        }

        //检查appId是否有配置，如果没有配置请重新配置
        if (!isset($this->config["app"])) {
            trigger_error("app settings error", E_USER_ERROR);
        }

        //要监听的app
        foreach ($this->config["app"] as $appInfo) {
            if (!isset($appInfo["appId"])) {
                trigger_error("app->appId settings error", E_USER_ERROR);
            }

            if (!isset($appInfo["token"])) {
                trigger_error("app->token settings error", E_USER_ERROR);
            }
        }

        //检查客户端连接的ip和端口
        if (!isset($this->config["ip"])) {
            trigger_error("Please enter the ip address of the connected apollo", E_USER_ERROR);
        }

        if (!isset($this->config["port"])) {
            trigger_error("apollo open api server setting error", E_USER_ERROR);
        }

        //apollo openapi的地址
        if (!isset($this->config["server"])) {
            trigger_error("Please enter the port address of the connected apollo", E_USER_ERROR);
        }

        //检查存储路径
        if (!isset($this->config["save_dir"])) {
            trigger_error("The configuration file storage path cannot be empty", E_USER_ERROR);
        }

        //检查是否是目录
        if (!is_dir($this->config["save_dir"])) {
            trigger_error("This is not a directory({$this->config["save_dir"]})", E_USER_ERROR);
        }

        //检查是否有日志配置
        if (!isset($this->config["logger"])) {
            trigger_error("apollo client logger setting error", E_USER_ERROR);
        }

        //检查是否有日志配置
        if (!isset($this->config["logger"]["dir"])) {
            trigger_error("apollo client logger[dir] setting error", E_USER_ERROR);
        }

        //目录检查合法性
        if (!is_dir($this->config["logger"]["dir"])) {
            trigger_error("apollo client logger path error", E_USER_ERROR);
        }

        //检查日志文件前缀合法性
        if (!isset($this->config["logger"]["file_name"])) {
            trigger_error("apollo client logger file_name error", E_USER_ERROR);
        }

        //重定向错误日志的位置
        $error_log = isset($this->config["php_error_log"]) ? $this->config["php_error_log"] : "";
        if ($error_log) {
            ini_set("error_log", $error_log);
        }

        //设置工作进程的处理函数
        $worker = new SwooleApolloWorker($this->config);
        $this->setOnWorker([$worker, "run"]);
        //运行apollo客户端运行池
        $this->manager($this->config);
    }
}